{"version":3,"sources":["Controls/TextInput.js","Controls/AutoComplete.js","Components/FormAdd1.js","Constants/InitailFormik.js","Components/FormAdd2.js","Components/FormAdd3.js","App.js","serviceWorker.js","index.js"],"names":["TextInput","form","field","label","customStyle","TextField","style","id","variant","AutoComplete","dataSource","Autocomplete","options","getOptionLabel","option","NAME","noOptionsText","onChange","e","value","setFieldValue","name","renderInput","params","placeholder","useStyles","makeStyles","theme","root","flexGrow","paper","padding","spacing","textAlign","color","palette","text","secondary","buttonAction","alignItem","margin","FormAdd1","fieldData","fiedData","onClearFiedData","genderMockdata","onRestoreForm","classes","formMikRef","useRef","handleClearForm","handleRestoreForm","current","resetForm","className","enableReinitialize","initialValues","fullname","FULLNAME","email","EMAIL","gender","GENDER","props","bindFormikProps","Paper","Grid","container","direction","justify","alignItems","item","xs","component","width","Button","onClick","tel","TEL","age","AGE","breakpoints","down","App","initialState","formAdd1","CODE","formAdd2","formAdd3","genderMock","useState","state","setState","handleClearFiedData","formName","prevState","alert","md","FormAdd2","FormAdd3","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c2f5808d.chunk.js","sourcesContent":["import React from 'react'\r\nimport TextField from '@material-ui/core/TextField'\r\n\r\nconst TextInput = ({ form, field, label, customStyle }) => {\r\n  return (\r\n    <TextField \r\n      {...field}\r\n      style={customStyle}\r\n      id=\"outlined-basic-`${field.name}`\"\r\n      label={label}\r\n      variant=\"outlined\"\r\n    />\r\n  )\r\n}\r\n\r\nexport default TextInput\r\n","import React from 'react'\r\n// Import Materail ui\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Autocomplete from '@material-ui/lab/Autocomplete'\r\n\r\nconst AutoComplete = ({ form, field, label, customStyle, dataSource = [] }) => {\r\n  return (\r\n    <Autocomplete\r\n      {...field}\r\n      style={customStyle}\r\n      id=\"combo-box-`${field.name}`\"\r\n      options={dataSource}\r\n      getOptionLabel={option => option.NAME}\r\n      noOptionsText={'ไม่พบข้อมูล'}\r\n      onChange={(e, value) => {\r\n        form.setFieldValue(field.name, value)\r\n      }}\r\n      renderInput={params => <TextField {...params} label={label} variant=\"outlined\" placeholder=\"กรุณาระบุ...\" />}\r\n    />\r\n  )\r\n}\r\n\r\nexport default AutoComplete\r\n","import React, { useRef } from 'react'\r\nimport { Field, Form, Formik, FormikProps } from 'formik'\r\n// Import Materail ui\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Autocomplete from '@material-ui/lab/Autocomplete'\r\nimport Button from '@material-ui/core/Button'\r\n// Import Controls\r\nimport TextInput from '../Controls/TextInput'\r\nimport AutoComplete from '../Controls/AutoComplete'\r\n// Import Constants\r\nimport { initailFormAdd1 } from '../Constants/InitailFormik'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  buttonAction: {\r\n    alignItem: 'left',\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n    },\r\n  }\r\n}))\r\n\r\nconst FormAdd1 = ({ fiedData, genderMockdata, onClearFiedData, onRestoreForm }) => {\r\n\r\n  const classes = useStyles()\r\n  const formMikRef = useRef()\r\n\r\n  const handleClearForm = () => {\r\n    // reset fieldData in state\r\n    if (onClearFiedData) onClearFiedData('formAdd1')\r\n  }\r\n\r\n  const handleRestoreForm = () => {\r\n    if (onRestoreForm) onRestoreForm('formAdd1')\r\n    formMikRef.current.resetForm()\r\n  }\r\n\r\n  const bindFormikProps = (props) => {\r\n    formMikRef.current = props\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Formik\r\n        enableReinitialize\r\n        initialValues={initailFormAdd1(fiedData)}\r\n      >\r\n        {\r\n          (props) => {\r\n\r\n            bindFormikProps(props)\r\n\r\n            return (\r\n              <Form>\r\n                <Paper className={classes.paper}>\r\n                  <Grid container spacing={2} direction=\"row\" justify=\"flex-start\" alignItems=\"flex-start\">\r\n\r\n                    <Grid item xs={12}>\r\n                      <h2>Form Add 1</h2>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                      <Field\r\n                        name=\"fullname\"\r\n                        label=\"ชื่อ-สกุล\"\r\n                        component={TextInput}\r\n                        customStyle={{\r\n                          width: '100%'\r\n                        }}\r\n                      />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                      <Field\r\n                        name=\"email\"\r\n                        label=\"อีเมล\"\r\n                        component={TextInput}\r\n                        customStyle={{\r\n                          width: '100%'\r\n                        }}\r\n                      />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                      <Field\r\n                        name=\"gender\"\r\n                        label=\"เพศ\"\r\n                        component={AutoComplete}\r\n                        dataSource={[]}\r\n                        customStyle={{\r\n                          width: '100%'\r\n                        }}\r\n                      />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} className={classes.buttonAction}>\r\n                      <Button variant=\"contained\" color=\"primary\" onClick={handleClearForm}>ล้างค่า</Button>\r\n                      <Button variant=\"contained\" onClick={handleRestoreForm}>คืนค่าเดิม</Button>\r\n                    </Grid>\r\n\r\n                  </Grid>\r\n                </Paper>\r\n              </Form>\r\n            )\r\n          }\r\n        }\r\n      </Formik>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FormAdd1\r\n","export const initailFormAdd1 = (fieldData) => {\r\n  const defualt = ''\r\n  return {\r\n    fullname: (fieldData) ? fieldData.FULLNAME : defualt,\r\n    email: (fieldData) ? fieldData.EMAIL : defualt,\r\n    gender: (fieldData) ? fieldData.GENDER : defualt\r\n  }\r\n}\r\n\r\nexport const initailFormAdd2 = (fieldData) => {\r\n  const defualt = ''\r\n  return {\r\n    fullname: (fieldData) ? fieldData.FULLNAME : defualt,\r\n    tel: (fieldData) ? fieldData.TEL : defualt,\r\n    gender: (fieldData) ? fieldData.GENDER : defualt\r\n  }\r\n}\r\n\r\nexport const initailFormAdd3 = (fieldData) => {\r\n  const defualt = ''\r\n  return {\r\n    fullname: (fieldData) ? fieldData.FULLNAME : defualt,\r\n    age: (fieldData) ? fieldData.AGE : defualt,\r\n    gender: (fieldData) ? fieldData.GENDER : defualt\r\n  }\r\n}","import React, { useRef } from 'react'\r\nimport { Field, Form, Formik, FormikProps } from 'formik'\r\n// Import Materail ui\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Autocomplete from '@material-ui/lab/Autocomplete'\r\nimport Button from '@material-ui/core/Button'\r\n// Import Controls\r\nimport TextInput from '../Controls/TextInput'\r\nimport AutoComplete from '../Controls/AutoComplete'\r\n// Import Constants\r\nimport { initailFormAdd2 } from '../Constants/InitailFormik'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  buttonAction: {\r\n    alignItem: 'left',\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n    },\r\n  }\r\n}))\r\n\r\nconst FormAdd1 = ({ fiedData, genderMockdata, onClearFiedData, onRestoreForm }) => {\r\n\r\n  const classes = useStyles()\r\n  const formMikRef = useRef()\r\n\r\n  const handleClearForm = () => {\r\n    // reset fieldData in state\r\n    if (onClearFiedData) onClearFiedData('formAdd2')\r\n  }\r\n\r\n  const handleRestoreForm = () => {\r\n    if (onRestoreForm) onRestoreForm('formAdd2')\r\n    formMikRef.current.resetForm()\r\n  }\r\n\r\n  const bindFormikProps = (props) => {\r\n    formMikRef.current = props\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Formik\r\n        enableReinitialize\r\n        initialValues={initailFormAdd2(fiedData)}\r\n      >\r\n        {\r\n          (props) => {\r\n\r\n            bindFormikProps(props)\r\n\r\n            return (\r\n              <Form>\r\n                <Paper className={classes.paper}>\r\n                  <Grid container spacing={2} direction=\"row\" justify=\"flex-start\" alignItems=\"flex-start\">\r\n\r\n                    <Grid item xs={12}>\r\n                      <h2>Form Add 2</h2>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                      <Field\r\n                        name=\"fullname\"\r\n                        label=\"ชื่อ-สกุล\"\r\n                        component={TextInput}\r\n                        customStyle={{\r\n                          width: '100%'\r\n                        }}\r\n                      />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                      <Field\r\n                        name=\"tel\"\r\n                        label=\"เบอร์โทร\"\r\n                        component={TextInput}\r\n                        customStyle={{\r\n                          width: '100%'\r\n                        }}\r\n                      />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                      <Field\r\n                        name=\"gender\"\r\n                        label=\"เพศ\"\r\n                        component={AutoComplete}\r\n                        dataSource={[]}\r\n                        customStyle={{\r\n                          width: '100%'\r\n                        }}\r\n                      />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} className={classes.buttonAction}>\r\n                      <Button variant=\"contained\" color=\"primary\" onClick={handleClearForm}>ล้างค่า</Button>\r\n                      <Button variant=\"contained\" onClick={handleRestoreForm}>คืนค่าเดิม</Button>\r\n                    </Grid>\r\n\r\n                  </Grid>\r\n                </Paper>\r\n              </Form>\r\n            )\r\n          }\r\n        }\r\n      </Formik>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FormAdd1\r\n","import React, { useRef } from 'react'\r\nimport { Field, Form, Formik, FormikProps } from 'formik'\r\n// Import Materail ui\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Autocomplete from '@material-ui/lab/Autocomplete'\r\nimport Button from '@material-ui/core/Button'\r\n// Import Controls\r\nimport TextInput from '../Controls/TextInput'\r\nimport AutoComplete from '../Controls/AutoComplete'\r\n// Import Constants\r\nimport { initailFormAdd3 } from '../Constants/InitailFormik'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  buttonAction: {\r\n    alignItem: 'left',\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n    },\r\n  }\r\n}))\r\n\r\nconst FormAdd1 = ({ fiedData, genderMockdata, onClearFiedData, onRestoreForm }) => {\r\n\r\n  const classes = useStyles()\r\n  const formMikRef = useRef()\r\n\r\n  const handleClearForm = () => {\r\n    // reset fieldData in state\r\n    if (onClearFiedData) onClearFiedData('formAdd3')\r\n  }\r\n\r\n  const handleRestoreForm = () => {\r\n    if (onRestoreForm) onRestoreForm('formAdd3')\r\n    formMikRef.current.resetForm()\r\n  }\r\n\r\n  const bindFormikProps = (props) => {\r\n    formMikRef.current = props\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Formik\r\n        enableReinitialize\r\n        initialValues={initailFormAdd3(fiedData)}\r\n      >\r\n        {\r\n          (props) => {\r\n\r\n            bindFormikProps(props)\r\n\r\n            return (\r\n              <Form>\r\n                <Paper className={classes.paper}>\r\n                  <Grid container spacing={2} direction=\"row\" justify=\"flex-start\" alignItems=\"flex-start\">\r\n\r\n                    <Grid item xs={12}>\r\n                      <h2>Form Add 3</h2>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                      <Field\r\n                        name=\"fullname\"\r\n                        label=\"ชื่อ-สกุล\"\r\n                        component={TextInput}\r\n                        customStyle={{\r\n                          width: '100%'\r\n                        }}\r\n                      />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                      <Field\r\n                        name=\"age\"\r\n                        label=\"อายุ\"\r\n                        component={TextInput}\r\n                        customStyle={{\r\n                          width: '100%'\r\n                        }}\r\n                      />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                      <Field\r\n                        name=\"gender\"\r\n                        label=\"เพศ\"\r\n                        component={AutoComplete}\r\n                        dataSource={[]}\r\n                        customStyle={{\r\n                          width: '100%'\r\n                        }}\r\n                      />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} className={classes.buttonAction}>\r\n                      <Button variant=\"contained\" color=\"primary\" onClick={handleClearForm}>ล้างค่า</Button>\r\n                      <Button variant=\"contained\" onClick={handleRestoreForm}>คืนค่าเดิม</Button>\r\n                    </Grid>\r\n\r\n                  </Grid>\r\n                </Paper>\r\n              </Form>\r\n            )\r\n          }\r\n        }\r\n      </Formik>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FormAdd1\r\n","import React, { useState } from 'react'\n// Import Materail ui\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Grid } from '@material-ui/core'\n// Import Control\nimport FormAdd1 from './Components/FormAdd1'\nimport FormAdd2 from './Components/FormAdd2'\nimport FormAdd3 from './Components/FormAdd3'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    margin: '20px',\n    padding: 0,\n    [theme.breakpoints.down('sm')]: {\n      margin: '5px',\n    },\n  },\n}))\n\nconst App = props => {\n\n  const classes = useStyles()\n\n  const initialState = {\n    fieldData: {\n      formAdd1: {\n        FULLNAME: \"สมชาย คงทรัพย์\",\n        EMAIL: \"demo@mail.com\",\n        GENDER: { CODE: 1, NAME: \"ผู้ชาย\" },\n      },\n      formAdd2: {\n        FULLNAME: \"ลุงตู่ว เต้นเก่ง\",\n        TEL: \"08xxxxxxxx\",\n        GENDER: { CODE: 1, NAME: \"ผู้ชาย\" },\n      },\n      formAdd3: {\n        FULLNAME: \"ลุงตู่ว เต้นเก่ง\",\n        AGE: 35,\n        GENDER: { CODE: 1, NAME: \"ผู้ชาย\" },\n      }\n    },\n    genderMock: [\n      { CODE: 0, NAME: \"ผู้หญิง\" },\n      { CODE: 1, NAME: \"ผู้ชาย\" },\n    ]\n  }\n\n  const [state, setState] = useState(initialState)\n\n  /**\n   * ล้างค่าทั้งหมด\n   * @param {*} formName \n   */\n  const handleClearFiedData = (formName) => {\n    if (formName && formName !== '') {\n      setState(prevState => ({\n        ...prevState,\n        fieldData: {\n          ...prevState.fieldData,\n          [formName]: null\n        }\n      }))\n    }\n    else {\n      alert('Require form name')\n    }\n  }\n\n  /**\n   * คืนค่าเดิมจาก initail\n   * @param {*} formName \n   */\n  const handleRestoreForm = (formName) => {\n    if (formName && formName !== '') {\n      setState(prevState => ({\n        ...prevState,\n        fieldData: {\n          ...prevState.fieldData,\n          [formName]: initialState.fieldData[formName]\n        }\n      }))\n    }\n    else {\n      alert('Require form name')\n    }\n  }\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={1}>\n\n        <Grid item xs={12} container direction=\"row\" justify=\"center\" alignItems=\"center\">\n          <h1>Formmik reset & restor (dynamic)</h1>\n        </Grid>\n\n        <Grid item xs={12} md={4}>\n          <FormAdd1\n            fiedData={state.fieldData.formAdd1}\n            genderMockdata={state.genderMock}\n            onClearFiedData={handleClearFiedData}\n            onRestoreForm={handleRestoreForm}\n          />\n        </Grid>\n\n        <Grid item xs={12} md={4}>\n          <FormAdd2\n            fiedData={state.fieldData.formAdd2}\n            genderMockdata={state.genderMock}\n            onClearFiedData={handleClearFiedData}\n            onRestoreForm={handleRestoreForm}\n          />\n        </Grid>\n\n        <Grid item xs={12} md={4}>\n          <FormAdd3\n            fiedData={state.fieldData.formAdd3}\n            genderMockdata={state.genderMock}\n            onClearFiedData={handleClearFiedData}\n            onRestoreForm={handleRestoreForm}\n          />\n        </Grid>\n\n      </Grid>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}