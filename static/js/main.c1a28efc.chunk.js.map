{"version":3,"sources":["Controls/TextField.js","Controls/AutoComplete.js","Hooks/UseInitialFormik.js","Components/FormAdd.js","Controls/CheckBox.js","Components/FormCheckbox.js","Controls/DatePick.js","Controls/TimePick.js","Components/FormDatePicker.js","Components/FormAdminPoly.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","DefualtView","props","field","label","style","size","isError","classes","className","TextField","error","variant","id","InputLabelProps","shrink","TextFieldControl","form","useState","state","DefaultView","dataSource","onChange","displayField","onRenderInput","Autocomplete","options","getOptionLabel","option","noOptionsText","renderInput","AutoComplete","onChangeValue","e","value","setFieldValue","name","params","placeholder","UseInitialFormik","initialFormAdd","fieldData","fullname","FULLNAME","email","EMAIL","gender","GENDER","initialFormCheckbox","status","STATUS","status2","STATUS2","initialFormDatePicker","date","DATE","Date","time","TIME","initialFormAdminPoly","province","PROVINCE","district","DISTRICT","subDistrict","SUBDISTRICT","paper","padding","spacing","textAlign","color","palette","text","secondary","buttonAction","alignItem","margin","FormAdd","onClearFieldData","onRestoreForm","formMikRef","useRef","initialFormHook","useInitialFormik","genderMock","CODE","NAME","handleClearForm","handleRestoreForm","current","resetForm","enableReinitialize","initialValues","bindFormikProps","Paper","Grid","container","direction","justify","alignItems","item","xs","component","width","Button","onClick","handleChange","FormControlLabel","control","Checkbox","checked","CheckBox","target","FormControl","handleReset","startDate","isClearable","selected","customInput","DatePick","getDate","getTime","startTime","format","showTimeSelect","showTimeSelectOnly","timeCaption","timeIntervals","dateFormat","TimePick","FormDatePicker","FormAdminPoly","formikRef","currentCode","provCode","ampCode","setState","useEffect","getProvince","a","fetch","response","json","result","prevState","getDistrict","getSubDistrict","handleChangeDistrict","handleResetForm","breakpoints","down","App","initialState","formAdd","formAddminPoly","handleClearFieldData","formName","alert","md","FormCheckbox","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.c1a28efc.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { Field, Form, Formik, FormikProps } from 'formik'\r\n// Import Materail ui\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport TextField from '@material-ui/core/TextField'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n}))\r\n\r\n/***\r\n * Guide line\r\n * dev O00085 Somchai\r\n * \r\n *  <Field\r\n      name=\"fullname\"\r\n      label=\"Fullname\"\r\n      component={TextField}\r\n      style={{ width: '100%' }}\r\n    />\r\n * \r\n */\r\n\r\nconst TextFieldControl = (props) => {\r\n\r\n  const {\r\n    form,\r\n    field,\r\n    label,\r\n    style,\r\n    size=\"small\"\r\n  } = props\r\n\r\n  const [state, setState] = useState({ error: false })\r\n\r\n  return (\r\n    <DefualtView\r\n      field={field}\r\n      label={label}\r\n      style={style}\r\n      size={size}\r\n      isError={state.error}\r\n    />\r\n  )\r\n}\r\n\r\n/**\r\n * function default view\r\n * dev O00085 Somchai\r\n * @param {*} props \r\n */\r\nconst DefualtView = (props) => {\r\n\r\n  const {\r\n    field,\r\n    label,\r\n    style,\r\n    size,\r\n    isError\r\n  } = props\r\n\r\n  const classes = useStyles()\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <TextField\r\n        error={isError}\r\n        {...field}\r\n        style={style}\r\n        label={label}\r\n        size={size}\r\n        variant=\"outlined\"\r\n        id=\"outlined-`${field}`\"\r\n        InputLabelProps={{ shrink: true }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TextFieldControl\r\n","import React, { useState } from 'react'\r\n// Import Materail ui\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Autocomplete from '@material-ui/lab/Autocomplete'\r\n\r\n/***\r\n * Guide line\r\n * dev O00085 Somchai\r\n * \r\n *  <Field\r\n      name=\"gender\"\r\n      label=\"Gender\"\r\n      component={Autocomplete}\r\n      dataSource={genderMockdata}\r\n      displayField=\"NAME\"\r\n      style={{ width: '100%' }}\r\n    />\r\n * \r\n */\r\n\r\n\r\nconst AutoComplete = (props) => {\r\n\r\n  const {\r\n    form,\r\n    field,\r\n    label,\r\n    style,\r\n    size = \"small\",\r\n    dataSource = [],\r\n    displayField,\r\n    onChangeValue\r\n  } = props\r\n\r\n  const [state, setState] = useState({ error: false })\r\n\r\n  const handleChange = (e, value) => {\r\n    form.setFieldValue(field.name, value)\r\n    if (onChangeValue) onChangeValue(value)\r\n  }\r\n\r\n  const createRenderInput = (params) => {\r\n    return (\r\n      <TextField\r\n        error={state.error}\r\n        {...params}\r\n        label={label}\r\n        size={size}\r\n        variant=\"outlined\"\r\n        InputLabelProps={{ shrink: true }}\r\n        placeholder=\"กรุณาระบุ...\"\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <DefaultView\r\n      field={field}\r\n      style={style}\r\n      dataSource={dataSource}\r\n      onChange={handleChange}\r\n      displayField={displayField}\r\n      onRenderInput={createRenderInput}\r\n    />\r\n  )\r\n}\r\n\r\n/**\r\n * function default view\r\n * dev O00085 Somchai\r\n * @param {*} props \r\n */\r\nconst DefaultView = (props) => {\r\n\r\n  const {\r\n    field,\r\n    style,\r\n    dataSource,\r\n    onChange,\r\n    displayField,\r\n    onRenderInput,\r\n  } = props\r\n\r\n  return (\r\n    <Autocomplete\r\n      {...field}\r\n      style={style}\r\n      id=\"combo-box-`${field.name}`\"\r\n      options={dataSource}\r\n      getOptionLabel={(option) => option[displayField]}\r\n      noOptionsText={'ไม่พบข้อมูล'}\r\n      onChange={onChange}\r\n      renderInput={onRenderInput}\r\n    />\r\n  )\r\n}\r\n\r\nexport default AutoComplete\r\n","const UseInitialFormik = props => {\r\n\r\n  // create initailForm (fieldData)\r\n\r\n  const initialFormAdd = (fieldData) => {\r\n    const empty = ''\r\n    return {\r\n      fullname: (fieldData) ? fieldData.FULLNAME : empty,\r\n      email: (fieldData) ? fieldData.EMAIL : empty,\r\n      gender: (fieldData) ? fieldData.GENDER : empty\r\n    }\r\n  }\r\n\r\n  const initialFormCheckbox = (fieldData) => {\r\n    const empty = ''\r\n    return {\r\n      fullname: (fieldData) ? fieldData.FULLNAME : empty,\r\n      email: (fieldData) ? fieldData.EMAIL : empty,\r\n      status: (fieldData) ? fieldData.STATUS : true,\r\n      status2: (fieldData) ? fieldData.STATUS2 : false,\r\n    }\r\n  }\r\n\r\n  const initialFormDatePicker = (fieldData) => {\r\n    const empty = ''\r\n    return {\r\n      fullname: (fieldData) ? fieldData.FULLNAME : empty,\r\n      email: (fieldData) ? fieldData.EMAIL : empty,\r\n      date: (fieldData) ? fieldData.DATE : new Date(),\r\n      time: (fieldData) ? fieldData.TIME : new Date(),\r\n    }\r\n  }\r\n\r\n  const initialFormAdminPoly = (fieldData) => {\r\n    const empty = ''\r\n    return {\r\n      province: (fieldData) ? fieldData.PROVINCE : empty,\r\n      district: (fieldData) ? fieldData.DISTRICT : empty,\r\n      subDistrict: (fieldData) ? fieldData.SUBDISTRICT : empty,\r\n    }\r\n  }\r\n\r\n  return {\r\n    initialFormAdd,\r\n    initialFormCheckbox,\r\n    initialFormDatePicker,\r\n    initialFormAdminPoly\r\n  }\r\n}\r\n\r\nexport default UseInitialFormik\r\n","import React, { useRef, useState } from 'react'\r\nimport { Field, Form, Formik, FormikProps } from 'formik'\r\n// Import Materail ui\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Autocomplete from '@material-ui/lab/Autocomplete'\r\nimport Button from '@material-ui/core/Button'\r\n// Import Controls\r\nimport TextField from '../Controls/TextField'\r\nimport AutoComplete from '../Controls/AutoComplete'\r\n// Import Constants\r\n// import { initailFormAdd1 } from '../Constants/InitailFormik'\r\nimport useInitialFormik from '../Hooks/UseInitialFormik'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  buttonAction: {\r\n    alignItem: 'left',\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n    },\r\n  }\r\n}))\r\n\r\nconst FormAdd = ({ fieldData, onClearFieldData, onRestoreForm }) => {\r\n\r\n  const classes = useStyles()\r\n  const formMikRef = useRef()\r\n  const initialFormHook = useInitialFormik()\r\n  const [state, setState] = useState({\r\n    genderMock: [\r\n      { CODE: 0, NAME: \"ผู้หญิง\" },\r\n      { CODE: 1, NAME: \"ผู้ชาย\" },\r\n    ]\r\n  })\r\n\r\n  const handleClearForm = () => {\r\n    // reset fieldData in state\r\n    if (onClearFieldData) onClearFieldData('formAdd')\r\n  }\r\n\r\n  const handleRestoreForm = () => {\r\n    if (onRestoreForm) onRestoreForm('formAdd')\r\n    formMikRef.current.resetForm()\r\n  }\r\n\r\n  const bindFormikProps = (props) => {\r\n    formMikRef.current = props\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Formik\r\n        enableReinitialize\r\n        initialValues={initialFormHook.initialFormAdd(fieldData)}\r\n      >\r\n        {\r\n          (props) => {\r\n\r\n            bindFormikProps(props)\r\n\r\n            return (\r\n              <Form>\r\n                <Paper className={classes.paper}>\r\n                  <Grid container spacing={2} direction=\"row\" justify=\"flex-start\" alignItems=\"flex-start\">\r\n\r\n                    <Grid item xs={12}>\r\n                      <h2>Form Add</h2>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                      <Field\r\n                        name=\"fullname\"\r\n                        label=\"ชื่อ-สกุล\"\r\n                        component={TextField}\r\n                        style={{\r\n                          width: '100%'\r\n                        }}\r\n                      />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                      <Field\r\n                        name=\"email\"\r\n                        label=\"อีเมล\"\r\n                        component={TextField}\r\n                        style={{\r\n                          width: '100%'\r\n                        }}\r\n                      />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                      <Field\r\n                        name=\"gender\"\r\n                        label=\"เพศ\"\r\n                        component={AutoComplete}\r\n                        dataSource={state.genderMock}\r\n                        displayField=\"NAME\"\r\n                        style={{\r\n                          width: '100%'\r\n                        }}\r\n                      />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} className={classes.buttonAction}>\r\n                      <Button variant=\"contained\" color=\"primary\" onClick={handleClearForm}>ล้างค่า</Button>\r\n                      <Button variant=\"contained\" onClick={handleRestoreForm}>คืนค่าเดิม</Button>\r\n                    </Grid>\r\n\r\n                  </Grid>\r\n                </Paper>\r\n              </Form>\r\n            )\r\n          }\r\n        }\r\n      </Formik>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FormAdd\r\n","import React from 'react'\r\n// Import Materail ui\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\n\r\n/***\r\n * Guide line\r\n * dev O00085 Somchai\r\n * \r\n *  <Field\r\n      name=\"status\"\r\n      label=\"Status\"\r\n      component={CheckBox}\r\n      style={{ width: '100%' }}\r\n    />\r\n * \r\n */\r\n\r\nconst CheckBox = (props) => {\r\n\r\n  const {\r\n    form,\r\n    field,\r\n    label\r\n  } = props\r\n\r\n  const handleChange = (e) => {\r\n    form.setFieldValue(field.name, e.target.checked)\r\n  }\r\n\r\n  return (\r\n    <DefaultView\r\n      label={label}\r\n      field={field}\r\n      handleChange={handleChange}\r\n    />\r\n  )\r\n}\r\n\r\n/**\r\n * function default view\r\n * dev O00085 Somchai\r\n * @param {*} props \r\n */\r\nconst DefaultView = (props) => {\r\n\r\n  const {\r\n    field,\r\n    label,\r\n    handleChange\r\n  } = props\r\n\r\n  return (\r\n    <FormControlLabel\r\n      control={\r\n        <Checkbox\r\n          name={field.name}\r\n          color=\"primary\"\r\n          checked={field.value}\r\n          onChange={handleChange}\r\n        />\r\n      }\r\n      label={label}\r\n    />\r\n  )\r\n}\r\n\r\nexport default CheckBox\r\n","import React from 'react'\r\nimport { Field, Form, Formik, FormikProps } from 'formik'\r\n// Import Materail ui\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Button from '@material-ui/core/Button'\r\n// Import Controls\r\nimport TextField from '../Controls/TextField'\r\nimport Autocomplete from '../Controls/AutoComplete'\r\nimport CheckBox from '../Controls/CheckBox'\r\n// Import Hooks\r\nimport useInitialFormik from '../Hooks/UseInitialFormik'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  buttonAction: {\r\n    alignItem: 'left',\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n    },\r\n  }\r\n}))\r\n\r\nconst FormControl = ({ fieldData }) => {\r\n\r\n  const classes = useStyles()\r\n  const initialFormHook = useInitialFormik()\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <Formik\r\n          enableReinitialize\r\n          initialValues={initialFormHook.initialFormCheckbox(fieldData)}\r\n        >\r\n          {\r\n            (props) => {\r\n              return (\r\n                <Form>\r\n                  <Grid container spacing={2} direction=\"row\" justify=\"flex-start\" alignItems=\"flex-start\">\r\n\r\n                    <Grid item xs={12}>\r\n                      <h2>Form Checkbox</h2>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                      <Field\r\n                        name=\"fullname\"\r\n                        label=\"Fullname\"\r\n                        component={TextField}\r\n                        style={{ width: '100%' }}\r\n                      />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                      <Field\r\n                        name=\"email\"\r\n                        label=\"อีเมล\"\r\n                        component={TextField}\r\n                        style={{\r\n                          width: '100%'\r\n                        }}\r\n                      />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                      <Field\r\n                        name=\"status\"\r\n                        label=\"Status\"\r\n                        component={CheckBox}\r\n                        style={{ width: '100%' }}\r\n                      />\r\n                      <Field\r\n                        name=\"status2\"\r\n                        label=\"Status2\"\r\n                        component={CheckBox}\r\n                        style={{ width: '100%' }}\r\n                      />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} className={classes.buttonAction}>\r\n                      <Button variant=\"contained\" onClick={props.handleReset}>คืนค่าเดิม</Button>\r\n                    </Grid>\r\n\r\n                  </Grid>\r\n                </Form>\r\n              )\r\n            }\r\n          }\r\n        </Formik>\r\n      </Paper>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FormControl\r\n","import React, { useState } from 'react'\r\nimport DatePicker from \"react-datepicker\"\r\nimport \"react-datepicker/dist/react-datepicker.css\"\r\n// Import Controls\r\nimport TextField from '@material-ui/core/TextField'\r\n\r\n/***\r\n * Guide line\r\n * dev O00085 Somchai\r\n * \r\n *  <Field\r\n      name=\"date\"\r\n      label=\"Date\"\r\n      component={DatePick}\r\n      style={{ width: '100%' }}\r\n    />\r\n * \r\n */\r\n\r\nconst DatePick = (props) => {\r\n\r\n  const {\r\n    form,\r\n    field,\r\n    style,\r\n    label,\r\n    size = \"small\"\r\n  } = props\r\n\r\n  const [state, setState] = useState({ error: false })\r\n\r\n  const getDate = () => {\r\n    let date = null\r\n    if (field.value) {\r\n      date = new Date(field.value)\r\n    }\r\n    return date\r\n  }\r\n\r\n  const handleChange = (date) => {\r\n    const getTime = (date) ? new Date(date).getTime() : ''\r\n    form.setFieldValue(field.name, getTime)\r\n  }\r\n\r\n  return (\r\n    <DefaultView\r\n      isError={state.error}\r\n      startDate={getDate()}\r\n      field={field}\r\n      style={style}\r\n      label={label}\r\n      size={size}\r\n      handleChange={handleChange}\r\n    />\r\n  )\r\n}\r\n\r\n/**\r\n * function default view\r\n * dev O00085 Somchai\r\n * @param {*} props \r\n */\r\nconst DefaultView = (props) => {\r\n\r\n  const {\r\n    isError,\r\n    startDate,\r\n    field,\r\n    style,\r\n    label,\r\n    size,\r\n    handleChange\r\n  } = props\r\n\r\n  const CustomInput = ({ value, onClick }) => {\r\n    return (\r\n      <TextField\r\n        error={isError}\r\n        id=\"outlined-`${field.name}`\"\r\n        variant=\"outlined\"\r\n        label={label}\r\n        value={value}\r\n        size={size}\r\n        onClick={onClick}\r\n        InputLabelProps={{ shrink: true }}\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <DatePicker\r\n      style={style}\r\n      isClearable\r\n      selected={startDate}\r\n      customInput={<CustomInput />}\r\n      onChange={(date) => handleChange(date)}\r\n    />\r\n  )\r\n}\r\n\r\nexport default DatePick\r\n","import React, { useState } from 'react'\r\nimport DatePicker from \"react-datepicker\"\r\nimport \"react-datepicker/dist/react-datepicker.css\"\r\n// Import Controls\r\nimport TextField from '@material-ui/core/TextField'\r\n\r\n/***\r\n * Guide line\r\n * dev O00085 Somchai\r\n * \r\n *  <Field\r\n      name=\"time\"\r\n      label=\"Time\"\r\n      component={TimePick}\r\n      format={{\r\n        timeIntervals: 10,\r\n        dateFormat: 'h:mm'\r\n      }}\r\n      style={{ width: '100%' }}\r\n    />\r\n * \r\n */\r\n\r\nconst TimePick = (props) => {\r\n\r\n  const {\r\n    form,\r\n    field,\r\n    style,\r\n    label,\r\n    size = \"small\",\r\n    format = { timeIntervals: 15, dateFormat: 'h:mm aa' }\r\n  } = props\r\n\r\n  const [state, setState] = useState({ error: false })\r\n\r\n  const getDate = () => {\r\n    let date = null\r\n    if (field.value) {\r\n      date = new Date(field.value)\r\n    }\r\n    return date\r\n  }\r\n\r\n  const handleChange = (date) => {\r\n    const getTime = (date) ? new Date(date).getTime() : ''\r\n    form.setFieldValue(field.name, getTime)\r\n  }\r\n\r\n  return (\r\n    <DefaultView\r\n      isError={state.error}\r\n      startTime={getDate()}\r\n      field={field}\r\n      style={style}\r\n      label={label}\r\n      size={size}\r\n      format={format}\r\n      handleChange={handleChange}\r\n    />\r\n  )\r\n}\r\n\r\n/**\r\n * function default view\r\n * dev O00085 Somchai\r\n * @param {*} props \r\n */\r\nconst DefaultView = (props) => {\r\n\r\n  const {\r\n    isError,\r\n    startTime,\r\n    field,\r\n    style,\r\n    label,\r\n    size,\r\n    format,\r\n    handleChange\r\n  } = props\r\n\r\n  const CustomInput = ({ value, onClick }) => {\r\n    return (\r\n      <TextField\r\n        error={isError}\r\n        id=\"outlined-`${field.name}`\"\r\n        variant=\"outlined\"\r\n        label={label}\r\n        value={value}\r\n        size={size}\r\n        onClick={onClick}\r\n        InputLabelProps={{ shrink: true }}\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <DatePicker\r\n      style={style}\r\n      isClearable\r\n      selected={startTime}\r\n      customInput={<CustomInput />}\r\n      onChange={(date) => handleChange(date)}\r\n      showTimeSelect\r\n      showTimeSelectOnly\r\n      timeCaption=\"Time\"\r\n      timeIntervals={format.timeIntervals}\r\n      dateFormat={format.dateFormat}\r\n    />\r\n  )\r\n}\r\n\r\nexport default TimePick\r\n","import React from 'react'\r\nimport { Field, Form, Formik, FormikProps } from 'formik'\r\n// Import Materail ui\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Button from '@material-ui/core/Button'\r\n// Import Hooks\r\nimport useInitialFormik from '../Hooks/UseInitialFormik'\r\n// Import Control\r\nimport TextField from '../Controls/TextField'\r\nimport DatePick from '../Controls/DatePick'\r\nimport TimePick from '../Controls/TimePick'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  buttonAction: {\r\n    alignItem: 'left',\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n    },\r\n  }\r\n}))\r\n\r\nconst FormDatePicker = ({ fieldData }) => {\r\n\r\n  const classes = useStyles()\r\n  const initialFormHook = useInitialFormik(fieldData)\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <Formik\r\n          enableReinitialize\r\n          initialValues={initialFormHook.initialFormDatePicker(fieldData)}\r\n        >\r\n          {\r\n            (props) => {\r\n              return (\r\n                <Form>\r\n                  <Grid container spacing={2} direction=\"row\" justify=\"flex-start\" alignItems=\"flex-start\">\r\n\r\n                    <Grid item xs={12}>\r\n                      <h2>Form Date Picker</h2>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                      <Field\r\n                        name=\"fullname\"\r\n                        label=\"ชื่อ-สกุล\"\r\n                        component={TextField}\r\n                        style={{\r\n                          width: '100%'\r\n                        }}\r\n                      />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                      <Field\r\n                        name=\"email\"\r\n                        label=\"อีเมล\"\r\n                        component={TextField}\r\n                        style={{\r\n                          width: '100%'\r\n                        }}\r\n                      />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={6}>\r\n                      <Field\r\n                        name=\"date\"\r\n                        label=\"Date\"\r\n                        component={DatePick}\r\n                        style={{ width: '100%' }}\r\n                      />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={6}>\r\n                      <Field\r\n                        name=\"time\"\r\n                        label=\"Time\"\r\n                        component={TimePick}\r\n                        format={{\r\n                          timeIntervals: 10,\r\n                          dateFormat: 'h:mm'\r\n                        }}\r\n                        style={{ width: '100%' }}\r\n                      />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} className={classes.buttonAction}>\r\n                      <Button variant=\"contained\" onClick={props.handleReset}>คืนค่าเดิม</Button>\r\n                    </Grid>\r\n\r\n                  </Grid>\r\n                </Form>\r\n              )\r\n            }\r\n          }\r\n        </Formik>\r\n      </Paper>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FormDatePicker\r\n","import React, { useState, useEffect, useRef } from 'react'\r\nimport { Field, Form, Formik, FormikProps } from 'formik'\r\n// Import Materail ui\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Button from '@material-ui/core/Button'\r\n// Import Controls\r\nimport Autocomplete from '../Controls/AutoComplete'\r\n// Import Hooks\r\nimport useInitialFormik from '../Hooks/UseInitialFormik'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  buttonAction: {\r\n    alignItem: 'left',\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n    },\r\n  }\r\n}))\r\n\r\nconst FormAdminPoly = ({ fieldData, onClearFieldData, onRestoreForm }) => {\r\n\r\n  const classes = useStyles()\r\n  const formikRef = useRef()\r\n  const initialFormHook = useInitialFormik()\r\n  const [state, setState] = useState({\r\n    province: [],\r\n    district: [],\r\n    subDistrict: [],\r\n    currentCode: {\r\n      provCode: null,\r\n      ampCode: null,\r\n    }\r\n  })\r\n\r\n  const handleClearForm = () => {\r\n    // reset fieldData in state\r\n    if (onClearFieldData) onClearFieldData('formAddminPoly')\r\n  }\r\n\r\n  useEffect(() => {\r\n\r\n    getProvince()\r\n\r\n  }, [])\r\n\r\n  const bindFormikProps = (props) => {\r\n    formikRef.current = props\r\n  }\r\n\r\n  const getProvince = async () => {\r\n    const response = await fetch('https://gdev.geotalent.co.th/AMZ-API-2019/api/lookup/adminpoly')\r\n    const result = await response.json()\r\n    setState(prevState => ({\r\n      ...prevState,\r\n      province: [...result]\r\n    }))\r\n  }\r\n\r\n  const getDistrict = async (provCode) => {\r\n    const response = await fetch(`https://gdev.geotalent.co.th/AMZ-API-2019/api/lookup/adminpoly?provCode=${provCode}`)\r\n    const result = await response.json()\r\n    setState(prevState => ({\r\n      ...prevState,\r\n      district: [...result]\r\n    }))\r\n  }\r\n\r\n  const getSubDistrict = async (provCode, ampCode) => {\r\n    const response = await fetch(`https://gdev.geotalent.co.th/AMZ-API-2019/api/lookup/adminpoly?provCode=${provCode}&ampCode=${ampCode}`)\r\n    const result = await response.json()\r\n    setState(prevState => ({\r\n      ...prevState,\r\n      subDistrict: [...result]\r\n    }))\r\n  }\r\n\r\n  const handleChangeProvice = (form) => value => {\r\n    form.setFieldValue(\"district\", null)\r\n    form.setFieldValue(\"subDistrict\", null)\r\n\r\n    setState(prevState => ({\r\n      ...prevState,\r\n      district: [],\r\n      subDistrict: [],\r\n    }))\r\n\r\n    if (value) {\r\n      form.setFieldValue(\"province\", value)\r\n      getDistrict(value.id)\r\n      setState(prevState => ({\r\n        ...prevState,\r\n        currentCode: {\r\n          ...prevState.currentCode,\r\n          provCode: value.id,\r\n        }\r\n      }))\r\n    }\r\n    else {\r\n      setState(prevState => ({\r\n        ...prevState,\r\n        currentCode: {\r\n          ...prevState.currentCode,\r\n          provCode: null,\r\n          ampCode: null\r\n        }\r\n      }))\r\n    }\r\n  }\r\n\r\n  const handleChangeDistrict = (form) => value => {\r\n    form.setFieldValue(\"subDistrict\", null)\r\n\r\n    setState(prevState => ({\r\n      ...prevState,\r\n      subDistrict: []\r\n    }))\r\n\r\n    if (value) {\r\n      form.setFieldValue(\"district\", value)\r\n      getSubDistrict(state.currentCode.provCode, value.id)\r\n      setState(prevState => ({\r\n        ...prevState,\r\n        currentCode: {\r\n          ...prevState.currentCode,\r\n          ampCode: value.id\r\n        }\r\n      }))\r\n    }\r\n  }\r\n\r\n  const handleResetForm = () => {\r\n    if (onRestoreForm) onRestoreForm('formAddminPoly')\r\n    formikRef.current.handleReset()\r\n    setState(prevState => ({\r\n      ...prevState,\r\n      district: [],\r\n      subDistrict: [],\r\n    }))\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <Formik\r\n          enableReinitialize\r\n          initialValues={initialFormHook.initialFormAdminPoly(fieldData)}\r\n        >\r\n          {\r\n            (props) => {\r\n              \r\n              if (bindFormikProps) bindFormikProps(props)\r\n\r\n              return (\r\n                <Form>\r\n                  <Grid container spacing={2} direction=\"row\" justify=\"flex-start\" alignItems=\"flex-start\">\r\n\r\n                    <Grid item xs={12}>\r\n                      <h2>Form Admin Poly</h2>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={6}>\r\n                      <Field\r\n                        name=\"province\"\r\n                        label=\"จังหวัด\"\r\n                        component={Autocomplete}\r\n                        dataSource={state.province}\r\n                        displayField=\"name\"\r\n                        style={{ width: '100%' }}\r\n                        onChangeValue={handleChangeProvice(props)}\r\n                      />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={6}>\r\n                      <Field\r\n                        name=\"district\"\r\n                        label=\"อำเภอ\"\r\n                        component={Autocomplete}\r\n                        dataSource={state.district}\r\n                        displayField=\"name\"\r\n                        style={{ width: '100%' }}\r\n                        onChangeValue={handleChangeDistrict(props)}\r\n                      />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={6}>\r\n                      <Field\r\n                        name=\"subDistrict\"\r\n                        label=\"ตำบล\"\r\n                        component={Autocomplete}\r\n                        dataSource={state.subDistrict}\r\n                        displayField=\"name\"\r\n                        style={{ width: '100%' }}\r\n                      />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} className={classes.buttonAction}>\r\n                      <Button variant=\"contained\" color=\"primary\" onClick={handleClearForm}>ล้างค่า</Button>\r\n                      <Button variant=\"contained\" onClick={handleResetForm}>คืนค่าเดิม</Button>\r\n                    </Grid>\r\n\r\n                  </Grid>\r\n                </Form>\r\n              )\r\n            }\r\n          }\r\n        </Formik>\r\n      </Paper>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FormAdminPoly\r\n","import React, { useState } from 'react'\n// Import Materail ui\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Grid } from '@material-ui/core'\n// Import Control\nimport FormAdd from './Components/FormAdd'\nimport FormCheckbox from './Components/FormCheckbox'\nimport FormDatePicker from './Components/FormDatePicker'\nimport FormAdminPoly from './Components/FormAdminPoly'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    margin: '20px',\n    padding: 0,\n    [theme.breakpoints.down('sm')]: {\n      margin: '5px',\n    },\n  },\n}))\n\nconst App = props => {\n\n  const classes = useStyles()\n\n  const initialState = {\n    fieldData: {\n      formAdd: {\n        FULLNAME: \"สมชาย คงทรัพย์\",\n        EMAIL: \"demo@mail.com\",\n        GENDER: { CODE: 1, NAME: \"ผู้ชาย\" },\n      },\n      formAddminPoly: {\n        PROVINCE: {id: \"24\", name: \"ฉะเชิงเทรา\"},\n        DISTRICT: {id: \"01\", name: \"เมืองฉะเชิงเทรา\"},\n        SUBDISTRICT: {id: \"02\", name: \"ท่าไข่\"}\n      }\n    }\n  }\n\n  const [state, setState] = useState(initialState)\n\n  /**\n   * ล้างค่าทั้งหมด\n   * @param {*} formName \n   */\n  const handleClearFieldData = (formName) => {\n    if (formName && formName !== '') {\n      setState(prevState => ({\n        ...prevState,\n        fieldData: {\n          ...prevState.fieldData,\n          [formName]: null\n        }\n      }))\n    }\n    else {\n      alert('Require form name')\n    }\n  }\n\n  /**\n   * คืนค่าเดิมจาก initail\n   * @param {*} formName \n   */\n  const handleRestoreForm = (formName) => {\n    if (formName && formName !== '') {\n      setState(prevState => ({\n        ...prevState,\n        fieldData: {\n          ...prevState.fieldData,\n          [formName]: initialState.fieldData[formName]\n        }\n      }))\n    }\n    else {\n      alert('Require form name')\n    }\n  }\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={1}>\n\n        <Grid item xs={12} container direction=\"row\" justify=\"center\" alignItems=\"center\">\n          <h1>Formik From Controls (dynamic)</h1>\n        </Grid>\n\n        <Grid item xs={12} md={4}>\n          <FormAdd\n            fieldData={state.fieldData.formAdd}\n            onClearFieldData={handleClearFieldData}\n            onRestoreForm={handleRestoreForm}\n          />\n        </Grid>\n\n        <Grid item xs={12} md={4}>\n          <FormCheckbox />\n        </Grid>\n\n        <Grid item xs={12} md={4}>\n          <FormDatePicker />\n        </Grid>\n\n        <Grid item xs={12} md={4}>\n          <FormAdminPoly \n            fieldData={state.fieldData.formAddminPoly}\n            onClearFieldData={handleClearFieldData}\n            onRestoreForm={handleRestoreForm}\n          />\n        </Grid>\n\n      </Grid>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}